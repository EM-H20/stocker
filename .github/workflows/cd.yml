name: CD Pipeline - Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - name: 📚 Checkout repository
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: 🔧 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: 'stable'
        channel: 'stable'
        cache: true

    - name: 📦 Cache pub dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-release-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-release-
          ${{ runner.os }}-pub-

    - name: 🚀 Get dependencies
      run: flutter pub get

    - name: 🌍 Create production .env file
      run: |
        echo "# Production environment configuration" > .env
        echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env
        echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
        echo "DEBUG_MODE=${{ secrets.DEBUG_MODE }}" >> .env
        echo "CONNECT_TIMEOUT=${{ secrets.CONNECT_TIMEOUT }}" >> .env
        echo "RECEIVE_TIMEOUT=${{ secrets.RECEIVE_TIMEOUT }}" >> .env
        echo "JWT_LOGIN_ENDPOINT=${{ secrets.JWT_LOGIN_ENDPOINT }}" >> .env
        echo "JWT_SIGNUP_ENDPOINT=${{ secrets.JWT_SIGNUP_ENDPOINT }}" >> .env
        echo "JWT_LOGOUT_ENDPOINT=${{ secrets.JWT_LOGOUT_ENDPOINT }}" >> .env

    - name: 📊 Extract version info
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_code=$(echo ${VERSION} | sed 's/v//g' | sed 's/\.//g')" >> $GITHUB_OUTPUT
        
    - name: 🔄 Update version in pubspec.yaml
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_CODE="${{ steps.version.outputs.version_code }}"
        sed -i "s/version: .*/version: ${VERSION#v}+${VERSION_CODE}/" pubspec.yaml
        echo "📋 Updated version to $(grep 'version:' pubspec.yaml)"

    - name: 🏗️ Build release APK
      run: flutter build apk --release

    - name: 🏗️ Build App Bundle (AAB)
      run: flutter build appbundle --release

    - name: 📝 Generate release notes
      id: release_notes
      run: |
        echo "📱 **Stocker ${{ steps.version.outputs.version }}**" > release_notes.md
        echo "" >> release_notes.md
        echo "🚀 **새로운 기능 및 개선사항**" >> release_notes.md
        echo "- 📊 투자 교육 시스템" >> release_notes.md
        echo "- 📝 퀴즈 및 출석 체크" >> release_notes.md
        echo "- 📈 학습 진도 추적" >> release_notes.md
        echo "- 💾 메모 기능" >> release_notes.md
        echo "" >> release_notes.md
        echo "📥 **설치 방법**" >> release_notes.md
        echo "1. APK 파일을 다운로드하세요" >> release_notes.md
        echo "2. Android 기기에서 '알 수 없는 소스' 설치 허용" >> release_notes.md
        echo "3. APK 파일을 실행하여 설치하세요" >> release_notes.md
        echo "" >> release_notes.md
        echo "🔧 **시스템 요구사항**" >> release_notes.md
        echo "- Android 5.0 (API 21) 이상" >> release_notes.md
        echo "- 최소 2GB RAM" >> release_notes.md

    - name: 🏷️ Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: 'Stocker ${{ steps.version.outputs.version }}'
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: 📤 Upload APK to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/flutter-apk/app-release.apk
        asset_name: stocker-${{ steps.version.outputs.version }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: 📤 Upload AAB to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/app/outputs/bundle/release/app-release.aab
        asset_name: stocker-${{ steps.version.outputs.version }}.aab
        asset_content_type: application/octet-stream

    - name: 📊 Build Summary
      run: |
        echo "## 🎉 릴리스 빌드 완료!" >> $GITHUB_STEP_SUMMARY
        echo "- **버전**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **빌드 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **APK 크기**: $(du -h build/app/outputs/flutter-apk/app-release.apk | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **AAB 크기**: $(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **릴리스 URL**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY